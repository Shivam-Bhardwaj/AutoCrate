import { NextRequest } from 'next/server'
import { POST } from '../export-step/route'
import { defaultCrateConfiguration } from '../../../../types/crate'

// Mock the step exporter
jest.mock('../../../../lib/step-processor/step-exporter', () => ({
  exportToSTEP: jest.fn(() => ({
    success: true,
    data: 'ISO-10303-21; HEADER; /* Generated by AutoCrate */',
    filename: 'crate-design.step',
    size: 1024,
    metadata: {
      version: 'AP242',
      generatedAt: new Date(),
      standardsCompliance: 'ISO-10303-21'
    }
  }))
}))

describe('/api/export-step', () => {
  beforeEach(() => {
    jest.clearAllMocks()
  })

  it('should export STEP file successfully', async () => {
    const request = new NextRequest('http://localhost:3000/api/export-step', {
      method: 'POST',
      body: JSON.stringify({
        configuration: defaultCrateConfiguration,
        options: {
          includePMI: true,
          includeMaterials: true,
          includeHardware: true
        }
      })
    })

    const response = await POST(request)
    const data = await response.json()

    expect(response.status).toBe(200)
    expect(data.success).toBe(true)
    expect(data.data).toBeDefined()
    expect(data.filename).toBe('crate-design.step')
    expect(data.size).toBe(1024)
    expect(data.metadata).toBeDefined()
    expect(data.metadata.version).toBe('AP242')
    expect(data.metadata.standardsCompliance).toBe('ISO-10303-21')
  })

  it('should handle missing configuration', async () => {
    const request = new NextRequest('http://localhost:3000/api/export-step', {
      method: 'POST',
      body: JSON.stringify({
        options: {
          includePMI: true,
          includeMaterials: true,
          includeHardware: true
        }
      })
    })

    const response = await POST(request)
    const data = await response.json()

    expect(response.status).toBe(400)
    expect(data.success).toBe(false)
    expect(data.error).toContain('configuration')
  })

  it('should handle invalid configuration', async () => {
    const request = new NextRequest('http://localhost:3000/api/export-step', {
      method: 'POST',
      body: JSON.stringify({
        configuration: {
          product: {
            length: -10, // Invalid negative dimension
            width: 0,    // Invalid zero dimension
            height: 1000 // Too large
          }
        },
        options: {
          includePMI: true,
          includeMaterials: true,
          includeHardware: true
        }
      })
    })

    const response = await POST(request)
    const data = await response.json()

    expect(response.status).toBe(400)
    expect(data.success).toBe(false)
    expect(data.error).toContain('invalid')
  })

  it('should handle missing options', async () => {
    const request = new NextRequest('http://localhost:3000/api/export-step', {
      method: 'POST',
      body: JSON.stringify({
        configuration: defaultCrateConfiguration
      })
    })

    const response = await POST(request)
    const data = await response.json()

    expect(response.status).toBe(200)
    expect(data.success).toBe(true)
    expect(data.data).toBeDefined()
  })

  it('should handle export failure', async () => {
    // Mock export failure
    const { exportToSTEP } = require('../../../../lib/step-processor/step-exporter')
    exportToSTEP.mockImplementationOnce(() => ({
      success: false,
      error: 'Export failed due to invalid geometry'
    }))

    const request = new NextRequest('http://localhost:3000/api/export-step', {
      method: 'POST',
      body: JSON.stringify({
        configuration: defaultCrateConfiguration,
        options: {
          includePMI: true,
          includeMaterials: true,
          includeHardware: true
        }
      })
    })

    const response = await POST(request)
    const data = await response.json()

    expect(response.status).toBe(500)
    expect(data.success).toBe(false)
    expect(data.error).toContain('Export failed')
  })

  it('should handle malformed JSON', async () => {
    const request = new NextRequest('http://localhost:3000/api/export-step', {
      method: 'POST',
      body: 'invalid json'
    })

    const response = await POST(request)
    const data = await response.json()

    expect(response.status).toBe(400)
    expect(data.success).toBe(false)
    expect(data.error).toContain('JSON')
  })

  it('should handle empty request body', async () => {
    const request = new NextRequest('http://localhost:3000/api/export-step', {
      method: 'POST',
      body: ''
    })

    const response = await POST(request)
    const data = await response.json()

    expect(response.status).toBe(400)
    expect(data.success).toBe(false)
    expect(data.error).toContain('body')
  })

  it('should handle different export options', async () => {
    const request = new NextRequest('http://localhost:3000/api/export-step', {
      method: 'POST',
      body: JSON.stringify({
        configuration: defaultCrateConfiguration,
        options: {
          includePMI: false,
          includeMaterials: false,
          includeHardware: false
        }
      })
    })

    const response = await POST(request)
    const data = await response.json()

    expect(response.status).toBe(200)
    expect(data.success).toBe(true)
    expect(data.data).toBeDefined()
  })

  it('should handle large configuration', async () => {
    const largeConfig = {
      ...defaultCrateConfiguration,
      product: {
        ...defaultCrateConfiguration.product,
        weight: 5000,
        length: 200,
        width: 150,
        height: 100
      },
      materials: {
        ...defaultCrateConfiguration.materials,
        plywood: {
          ...defaultCrateConfiguration.materials.plywood,
          thickness: 1.5,
          grade: 'Marine'
        }
      }
    }

    const request = new NextRequest('http://localhost:3000/api/export-step', {
      method: 'POST',
      body: JSON.stringify({
        configuration: largeConfig,
        options: {
          includePMI: true,
          includeMaterials: true,
          includeHardware: true
        }
      })
    })

    const response = await POST(request)
    const data = await response.json()

    expect(response.status).toBe(200)
    expect(data.success).toBe(true)
    expect(data.data).toBeDefined()
  })

  it('should handle concurrent requests', async () => {
    const request1 = new NextRequest('http://localhost:3000/api/export-step', {
      method: 'POST',
      body: JSON.stringify({
        configuration: defaultCrateConfiguration,
        options: { includePMI: true }
      })
    })

    const request2 = new NextRequest('http://localhost:3000/api/export-step', {
      method: 'POST',
      body: JSON.stringify({
        configuration: defaultCrateConfiguration,
        options: { includePMI: false }
      })
    })

    const [response1, response2] = await Promise.all([
      POST(request1),
      POST(request2)
    ])

    expect(response1.status).toBe(200)
    expect(response2.status).toBe(200)
    
    const data1 = await response1.json()
    const data2 = await response2.json()
    
    expect(data1.success).toBe(true)
    expect(data2.success).toBe(true)
  })
})
