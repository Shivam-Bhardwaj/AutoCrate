/**
 * API Routes for Integration Hub Management
 * Handles integration CRUD operations and job management
 */

import { NextRequest, NextResponse } from 'next/server';
import { IntegrationHubService } from '@/services/integrationHub';
import { IntegrationConfig, IntegrationType } from '@/types/integration';

const integrationHub = IntegrationHubService.getInstance();

/**
 * GET /api/integrations - Get all integrations or filter by type
 */
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const type = searchParams.get('type') as IntegrationType | null;
    const status = searchParams.get('status');
    const enabled = searchParams.get('enabled');

    let integrations = integrationHub.getAllIntegrations();

    // Apply filters
    if (type) {
      integrations = integrations.filter(i => i.type === type);
    }
    if (status) {
      integrations = integrations.filter(i => i.status === status);
    }
    if (enabled !== null) {
      integrations = integrations.filter(i => i.enabled === (enabled === 'true'));
    }

    return NextResponse.json({
      success: true,
      data: integrations,
      count: integrations.length,
    });
  } catch (error) {
    console.error('Failed to fetch integrations:', error);
    return NextResponse.json(
      {
        success: false,
        error: 'Failed to fetch integrations',
        message: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}

/**
 * POST /api/integrations - Create a new integration
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { name, type, authentication, apiEndpoint, syncInterval } = body;

    if (!name || !type) {
      return NextResponse.json(
        {
          success: false,
          error: 'Missing required fields',
          message: 'Name and type are required',
        },
        { status: 400 }
      );
    }

    const config: IntegrationConfig = {
      id: '', // Will be generated by service
      name,
      type,
      status: 'disconnected',
      enabled: false,
      authentication,
      apiEndpoint,
      syncInterval,
    };

    const integrationId = integrationHub.addIntegration(config);

    return NextResponse.json({
      success: true,
      data: {
        id: integrationId,
        message: 'Integration created successfully',
      },
    }, { status: 201 });
  } catch (error) {
    console.error('Failed to create integration:', error);
    return NextResponse.json(
      {
        success: false,
        error: 'Failed to create integration',
        message: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}

/**
 * PATCH /api/integrations - Update multiple integrations
 */
export async function PATCH(request: NextRequest) {
  try {
    const body = await request.json();
    const { integrationIds, updates } = body;

    if (!integrationIds || !Array.isArray(integrationIds) || !updates) {
      return NextResponse.json(
        {
          success: false,
          error: 'Invalid request',
          message: 'integrationIds array and updates object are required',
        },
        { status: 400 }
      );
    }

    const results = integrationIds.map(id => ({
      id,
      success: integrationHub.updateIntegration(id, updates),
    }));

    const successCount = results.filter(r => r.success).length;

    return NextResponse.json({
      success: successCount > 0,
      data: {
        updated: successCount,
        failed: results.length - successCount,
        results,
      },
    });
  } catch (error) {
    console.error('Failed to update integrations:', error);
    return NextResponse.json(
      {
        success: false,
        error: 'Failed to update integrations',
        message: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}

/**
 * DELETE /api/integrations - Delete multiple integrations
 */
export async function DELETE(request: NextRequest) {
  try {
    const body = await request.json();
    const { integrationIds } = body;

    if (!integrationIds || !Array.isArray(integrationIds)) {
      return NextResponse.json(
        {
          success: false,
          error: 'Invalid request',
          message: 'integrationIds array is required',
        },
        { status: 400 }
      );
    }

    const results = integrationIds.map(id => ({
      id,
      success: integrationHub.removeIntegration(id),
    }));

    const successCount = results.filter(r => r.success).length;

    return NextResponse.json({
      success: true,
      data: {
        deleted: successCount,
        failed: results.length - successCount,
        results,
      },
    });
  } catch (error) {
    console.error('Failed to delete integrations:', error);
    return NextResponse.json(
      {
        success: false,
        error: 'Failed to delete integrations',
        message: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}