import { NextRequest, NextResponse } from 'next/server';
import { generateNXExpressions } from '@/lib/nx-generator';
import { heavyRateLimit } from '@/lib/rate-limiter';

interface NXExportRequest {
  crateId?: string;
  dimensions: {
    length: number;
    width: number;
    height: number;
  };
  weight: number;
  exportFormat?: 'expressions' | 'step' | 'iges' | 'jt';
  includeDrawings?: boolean;
  units?: 'mm' | 'inch';
}

async function postHandler(request: NextRequest) {
  try {
    const body: NXExportRequest = await request.json();

    // Generate full NX expressions
    const nxExpressions = generateNXExpressions(
      body.dimensions,
      body.weight,
      'plywood'
    );

    // Convert units if needed
    const convertedDimensions = body.units === 'inch' ?
      convertDimensions(body.dimensions, 'inch') :
      body.dimensions;

    const response = {
      exportId: `NX-${Date.now()}`,
      crateId: body.crateId || `CRATE-${Date.now()}`,
      timestamp: new Date().toISOString(),
      input: body,
      export: {
        format: body.exportFormat || 'expressions',
        units: body.units || 'mm',
        dimensions: convertedDimensions,
        expressionCount: countExpressions(nxExpressions),
        fileSize: Buffer.from(nxExpressions).length,
        content: nxExpressions,
        metadata: {
          generator: 'AutoCrate NX Generator v1.0',
          createdAt: new Date().toISOString(),
          compatibility: 'NX 12.0 and above'
        }
      },
      downloadUrl: `/api/nx-export/download/${Date.now()}`,
      status: 'success'
    };

    return NextResponse.json(response);
  } catch (error) {
    return NextResponse.json(
      {
        error: 'NX export failed',
        details: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  return heavyRateLimit(request, postHandler);
}

async function getHandler(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const exportId = searchParams.get('exportId');

  if (!exportId) {
    // Return export capabilities
    return NextResponse.json({
      supportedFormats: ['expressions', 'step', 'iges', 'jt'],
      supportedUnits: ['mm', 'inch'],
      features: {
        parametric: true,
        associative: true,
        drawings: true,
        assembly: true
      },
      nxVersions: ['NX 12.0', 'NX 1847', 'NX 1899', 'NX 1953', 'NX 2206'],
      timestamp: new Date().toISOString()
    });
  }

  // Simulate retrieving exported file
  return new NextResponse('# NX Expression File\n# Generated by AutoCrate\n# Export ID: ' + exportId, {
    headers: {
      'Content-Type': 'text/plain',
      'Content-Disposition': `attachment; filename="crate_${exportId}.exp"`
    }
  });
}

export async function GET(request: NextRequest) {
  return heavyRateLimit(request, getHandler);
}

function convertDimensions(dimensions: any, targetUnit: string): any {
  const factor = targetUnit === 'inch' ? 0.0393701 : 25.4;
  return {
    length: dimensions.length * factor,
    width: dimensions.width * factor,
    height: dimensions.height * factor
  };
}

function countExpressions(expressions: string): number {
  return (expressions.match(/^\s*\w+\s*=/gm) || []).length;
}