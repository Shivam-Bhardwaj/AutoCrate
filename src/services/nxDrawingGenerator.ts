import { saveAs } from 'file-saver';
import JSZip from 'jszip';
import type { 
  NXDrawingTemplate, 
  TitleBlockData,
  NXExportOptions,
  AssemblyComponent 
} from '@/types/nx';
import type { CrateConfiguration } from '@/types/crate';

export class NXDrawingGenerator {
  private config: CrateConfiguration;
  private options: NXExportOptions;

  constructor(config: CrateConfiguration, options: NXExportOptions) {
    this.config = config;
    this.options = options;
  }

  async generateDrawingPackage(): Promise<void> {
    try {
      const zip = new JSZip();
      
      // Generate main assembly drawing
      const assemblyDrawing = await this.generateAssemblyDrawing();
      zip.file('01_Assembly_Drawing.prt', assemblyDrawing);
      
      // Generate component drawings
      const components = this.getDrawingComponents();
      for (let i = 0; i < components.length; i++) {
        const componentDrawing = await this.generateComponentDrawing(components[i], i + 2);
        zip.file(`${(i + 2).toString().padStart(2, '0')}_${components[i].name.replace(/\s+/g, '_')}.prt`, componentDrawing);
      }
      
      // Generate BOM
      const bomDrawing = await this.generateBOMDrawing();
      zip.file('99_Bill_of_Materials.txt', bomDrawing);
      
      // Generate readme/instructions
      const instructions = this.generateInstructions();
      zip.file('README_NX_Import.txt', instructions);
      
      const zipBlob = await zip.generateAsync({ type: 'blob' });
      saveAs(zipBlob, `${this.generatePartNumber()}_Drawings.zip`);
      
    } catch (error) {
      console.error('Drawing generation failed:', error);
      throw new Error(`Drawing generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  private async generateAssemblyDrawing(): Promise<Blob> {
    const titleBlock = this.createTitleBlock('Assembly Drawing');
    
    const drawingContent = [
      '! NX CAD Part File - Assembly Drawing',
      '! Generated by AutoCrate Professional',
      `! Date: ${new Date().toISOString()}`,
      '! ASME Y14.5-2009 Compliant',
      '',
      '! File Format: NX 2022',
      'VERSION 2022',
      'UNITS INCHES',
      'COORDINATE_SYSTEM ABSOLUTE',
      '',
      '! Title Block Information',
      `TITLE "${titleBlock.projectName}"`,
      `PART_NUMBER "${titleBlock.partNumber}"`,
      `TC_NUMBER "${titleBlock.tcNumber}"`,
      `REVISION "${titleBlock.revision}"`,
      `DRAWN_BY "${titleBlock.drawnBy}"`,
      `CHECKED_BY "${titleBlock.checkedBy}"`,
      `APPROVED_BY "${titleBlock.approvedBy}"`,
      `DATE "${titleBlock.date.toLocaleDateString()}"`,
      `SCALE "${titleBlock.scale}"`,
      `MATERIAL "${titleBlock.material}"`,
      `FINISH "${titleBlock.finish}"`,
      '',
      '! Sheet Setup',
      'SHEET_FORMAT D_SIZE',
      'PROJECTION_TYPE THIRD_ANGLE',
      'STANDARD ASME_Y14_5_2009',
      '',
      '! Assembly Views',
      'VIEW_START ISOMETRIC',
      'VIEW_POSITION 6.0 4.0',
      'VIEW_SCALE 0.25',
      'VIEW_ROTATION 45 30 0',
      this.generateIsometricView(),
      'VIEW_END',
      '',
      'VIEW_START FRONT',
      'VIEW_POSITION 2.0 6.0',
      'VIEW_SCALE 0.125',
      this.generateFrontView(),
      'VIEW_END',
      '',
      'VIEW_START RIGHT',
      'VIEW_POSITION 6.0 6.0',
      'VIEW_SCALE 0.125',
      this.generateRightView(),
      'VIEW_END',
      '',
      'VIEW_START TOP',
      'VIEW_POSITION 2.0 2.0',
      'VIEW_SCALE 0.125',
      this.generateTopView(),
      'VIEW_END',
      '',
      '! Dimensions and Annotations',
      this.generateDimensions(),
      '',
      '! Notes and Specifications',
      this.generateNotes(),
      '',
      '! Applied Materials Standards',
      this.generateAMATStandards(),
      ''
    ].join('\n');

    return new Blob([drawingContent], { type: 'text/plain' });
  }

  private async generateComponentDrawing(component: AssemblyComponent, drawingNumber: number): Promise<Blob> {
    const titleBlock = this.createTitleBlock(`${component.name} Detail`, component.partNumber);
    
    const drawingContent = [
      `! NX CAD Part File - ${component.name}`,
      '! Generated by AutoCrate Professional',
      `! Date: ${new Date().toISOString()}`,
      '! ASME Y14.5-2009 Compliant',
      '',
      'VERSION 2022',
      'UNITS INCHES',
      'COORDINATE_SYSTEM ABSOLUTE',
      '',
      `TITLE "${titleBlock.projectName}"`,
      `PART_NUMBER "${titleBlock.partNumber}"`,
      `TC_NUMBER "${titleBlock.tcNumber}"`,
      `DRAWING_NUMBER "${drawingNumber.toString().padStart(2, '0')}"`,
      '',
      '! Component Geometry',
      this.generateComponentGeometry(component),
      '',
      '! Material Specifications',
      this.generateMaterialSpecs(component),
      '',
      '! Manufacturing Instructions',
      this.generateManufacturingInstructions(component),
      ''
    ].join('\n');

    return new Blob([drawingContent], { type: 'text/plain' });
  }

  private generateIsometricView(): string {
    const { width, height, length } = this.config.dimensions;
    const depth = length;
    
    return [
      '! Isometric view showing overall assembly',
      'WIREFRAME_START',
      `BLOCK 0 0 0 ${width} ${depth} ${height}`,
      'WIREFRAME_END',
      '',
      '! Component callouts',
      `CALLOUT 1 "Skid Assembly" ${width/4} ${depth/4} -2`,
      `CALLOUT 2 "Floor Panel" ${width/2} ${depth/2} 0.75`,
      `CALLOUT 3 "Front Panel" ${width/2} ${depth} ${height/2}`,
      `CALLOUT 4 "Back Panel" ${width/2} 0 ${height/2}`,
      `CALLOUT 5 "Left Panel" 0 ${depth/2} ${height/2}`,
      `CALLOUT 6 "Right Panel" ${width} ${depth/2} ${height/2}`,
      ...((this.config.cap.topPanel ? true : false) ? [`CALLOUT 7 "Top Panel" ${width/2} ${depth/2} ${height}`] : [])
    ].join('\n');
  }

  private generateFrontView(): string {
    const { width, height } = this.config.dimensions;
    
    return [
      '! Front elevation view',
      'PROJECTION_LINES_START',
      `LINE 0 0 ${width} 0`,
      `LINE 0 ${height} ${width} ${height}`,
      `LINE 0 0 0 ${height}`,
      `LINE ${width} 0 ${width} ${height}`,
      'PROJECTION_LINES_END',
      '',
      '! Hidden lines for internal structure',
      'HIDDEN_LINES_START',
      `LINE 1.5 0 1.5 ${height}`,
      `LINE ${width-1.5} 0 ${width-1.5} ${height}`,
      'HIDDEN_LINES_END'
    ].join('\n');
  }

  private generateRightView(): string {
    const { length: depth, height } = this.config.dimensions;
    
    return [
      '! Right side elevation view',
      'PROJECTION_LINES_START',
      `LINE 0 0 ${depth} 0`,
      `LINE 0 ${height} ${depth} ${height}`,
      `LINE 0 0 0 ${height}`,
      `LINE ${depth} 0 ${depth} ${height}`,
      'PROJECTION_LINES_END',
      '',
      'HIDDEN_LINES_START',
      `LINE 1.5 0 1.5 ${height}`,
      `LINE ${depth-1.5} 0 ${depth-1.5} ${height}`,
      'HIDDEN_LINES_END'
    ].join('\n');
  }

  private generateTopView(): string {
    const { width, length: depth } = this.config.dimensions;
    
    return [
      '! Top plan view',
      'PROJECTION_LINES_START',
      `LINE 0 0 ${width} 0`,
      `LINE 0 ${depth} ${width} ${depth}`,
      `LINE 0 0 0 ${depth}`,
      `LINE ${width} 0 ${width} ${depth}`,
      'PROJECTION_LINES_END',
      '',
      '! Skid structure visible',
      'CONSTRUCTION_LINES_START',
      `LINE 1.5 1.5 1.5 ${depth-1.5}`,
      `LINE ${width-1.5} 1.5 ${width-1.5} ${depth-1.5}`,
      `LINE 1.5 1.5 ${width-1.5} 1.5`,
      `LINE 1.5 ${depth-1.5} ${width-1.5} ${depth-1.5}`,
      'CONSTRUCTION_LINES_END'
    ].join('\n');
  }

  private generateDimensions(): string {
    const { width, length: depth, height } = this.config.dimensions;
    
    return [
      '! Primary dimensions',
      'DIMENSION_START',
      `LINEAR_DIM 0 -2 ${width} -2 "WIDTH ${width}\""`,
      `LINEAR_DIM -2 0 -2 ${depth} "DEPTH ${depth}\""`,
      `LINEAR_DIM ${width+2} 0 ${width+2} ${height} "HEIGHT ${height}\""`,
      'DIMENSION_END',
      '',
      '! Material thickness callouts',
      'CALLOUT_START',
      'CALLOUT "3/4\\" PLYWOOD FLOOR" 2 2',
      'CALLOUT "3/4\\" PLYWOOD WALLS" 4 4',
      'CALLOUT "2x4 LUMBER SKID" 6 6',
      'CALLOUT_END'
    ].join('\n');
  }

  private generateNotes(): string {
    return [
      '! General Notes',
      'NOTES_START',
      'NOTE 1: ALL LUMBER TO BE DOUGLAS FIR CONSTRUCTION GRADE',
      'NOTE 2: ALL PLYWOOD TO BE CDX EXTERIOR GRADE',
      'NOTE 3: ALL FASTENERS TO BE HOT DIPPED GALVANIZED',
      'NOTE 4: LAG BOLTS 3/8" x 6" AS SHOWN',
      'NOTE 5: WOOD SCREWS #10 x 2-1/2" AS REQUIRED',
      'NOTE 6: COMPLY WITH ISPM-15 INTERNATIONAL STANDARDS',
      'NOTE 7: HEAT TREATMENT STAMP REQUIRED FOR EXPORT',
      'NOTES_END'
    ].join('\n');
  }

  private generateAMATStandards(): string {
    if (!this.options.applyMaterialsStandards) return '';
    
    return [
      '! Applied Materials Standards',
      'STANDARDS_START',
      'STANDARD: APPLIED MATERIALS PACKAGING SPECIFICATION',
      'PART_NUMBER_FORMAT: 0205-XXXXX',
      'TC_ENGINEERING: TC2-XXXXXXX',
      'MATERIAL_COMPLIANCE: ROHS_COMPLIANT',
      'PACKAGING_LEVEL: LEVEL_3_PROTECTION',
      'VIBRATION_RATING: MIL_STD_810',
      'MOISTURE_PROTECTION: REQUIRED',
      'STANDARDS_END'
    ].join('\n');
  }

  private generateComponentGeometry(component: AssemblyComponent): string {
    switch (component.name) {
      case 'Skid Assembly':
        return this.generateSkidGeometry();
      case 'Floor Panel':
        return this.generateFloorGeometry();
      case 'Front Panel':
      case 'Back Panel':
      case 'Left Panel':
      case 'Right Panel':
        return this.generatePanelGeometry(component.name);
      case 'Top Panel':
        return this.generateTopGeometry();
      default:
        return '! Component geometry placeholder';
    }
  }

  private generateSkidGeometry(): string {
    const { width, length: depth } = this.config.dimensions;
    const skidSpacing = Math.min(width, depth) <= 48 ? 24 : 36;
    
    return [
      '! 2x4 Skid Construction',
      'FEATURE_START SKID_RUNNERS',
      `EXTRUDE_RECTANGLE 0 0 1.5 3.5 ${width}`,
      `EXTRUDE_RECTANGLE 0 ${depth-3.5} 1.5 3.5 ${width}`,
      'FEATURE_END',
      '',
      'FEATURE_START SKID_CROSSMEMBERS',
      `EXTRUDE_RECTANGLE 0 3.5 1.5 3.5 ${skidSpacing}`,
      `EXTRUDE_RECTANGLE 0 ${depth-7} 1.5 3.5 ${skidSpacing}`,
      'FEATURE_END'
    ].join('\n');
  }

  private generateFloorGeometry(): string {
    const { width, length: depth } = this.config.dimensions;
    
    return [
      '! 3/4" Plywood Floor Panel',
      'FEATURE_START FLOOR_PANEL',
      `EXTRUDE_RECTANGLE 0 0 0.75 ${width} ${depth}`,
      'FEATURE_END',
      '',
      '! Mounting holes for skid attachment',
      'FEATURE_START MOUNTING_HOLES',
      'HOLE 3 3 0.5 THRU',
      `HOLE ${width-3} 3 0.5 THRU`,
      `HOLE 3 ${depth-3} 0.5 THRU`,
      `HOLE ${width-3} ${depth-3} 0.5 THRU`,
      'FEATURE_END'
    ].join('\n');
  }

  private generatePanelGeometry(panelName: string): string {
    const { width, length: depth, height } = this.config.dimensions;
    let panelWidth, panelHeight;
    
    if (panelName.includes('Front') || panelName.includes('Back')) {
      panelWidth = width;
      panelHeight = height;
    } else {
      panelWidth = depth;
      panelHeight = height;
    }
    
    return [
      `! 3/4" Plywood ${panelName}`,
      'FEATURE_START PANEL',
      `EXTRUDE_RECTANGLE 0 0 0.75 ${panelWidth} ${panelHeight}`,
      'FEATURE_END',
      '',
      '! Corner reinforcement',
      'FEATURE_START CORNER_BLOCKS',
      'EXTRUDE_RECTANGLE 0 0 1.5 1.5 3.5',
      `EXTRUDE_RECTANGLE ${panelWidth-1.5} 0 1.5 1.5 3.5`,
      `EXTRUDE_RECTANGLE 0 ${panelHeight-3.5} 1.5 1.5 3.5`,
      `EXTRUDE_RECTANGLE ${panelWidth-1.5} ${panelHeight-3.5} 1.5 1.5 3.5`,
      'FEATURE_END'
    ].join('\n');
  }

  private generateTopGeometry(): string {
    const { width, length: depth } = this.config.dimensions;
    
    return [
      '! 3/4" Plywood Top Panel',
      'FEATURE_START TOP_PANEL',
      `EXTRUDE_RECTANGLE 0 0 0.75 ${width} ${depth}`,
      'FEATURE_END'
    ].join('\n');
  }

  private generateMaterialSpecs(component: AssemblyComponent): string {
    const specs = [
      '! Material Specifications',
      'MATERIAL_START'
    ];
    
    if (component.name.includes('Skid')) {
      specs.push(
        'MATERIAL_TYPE: DOUGLAS_FIR_LUMBER',
        'GRADE: CONSTRUCTION',
        'SIZE: 2x4_NOMINAL',
        'ACTUAL_SIZE: 1.5" x 3.5"',
        'MOISTURE_CONTENT: 19%_MAX',
        'TREATMENT: KILN_DRIED'
      );
    } else {
      specs.push(
        'MATERIAL_TYPE: CDX_PLYWOOD',
        'GRADE: EXTERIOR',
        'THICKNESS: 0.75"',
        'SPECIES: DOUGLAS_FIR',
        'GLUE_TYPE: EXTERIOR_WBP'
      );
    }
    
    specs.push('MATERIAL_END');
    return specs.join('\n');
  }

  private generateManufacturingInstructions(component: AssemblyComponent): string {
    return [
      '! Manufacturing Instructions',
      'MANUFACTURING_START',
      '1. CUT MATERIAL TO SPECIFIED DIMENSIONS',
      '2. SAND ALL SURFACES TO 120 GRIT',
      '3. PREDRILL ALL FASTENER HOLES',
      '4. APPLY WOOD PRESERVATIVE IF REQUIRED',
      '5. ASSEMBLE PER DRAWING SPECIFICATIONS',
      '6. INSPECT DIMENSIONAL ACCURACY',
      '7. APPLY QUALITY CONTROL STAMP',
      'MANUFACTURING_END'
    ].join('\n');
  }

  private async generateBOMDrawing(): Promise<Blob> {
    const bomContent = [
      'Bill of Materials',
      `Project: AutoCrate ${this.config.dimensions.width}x${this.config.dimensions.length}x${this.config.dimensions.height}`,
      `Part Number: ${this.generatePartNumber()}`,
      `TC Number: ${this.generateTCNumber()}`,
      `Date: ${new Date().toLocaleDateString()}`,
      '',
      'Item | Part Number | Description | Qty | Material | Dimensions | Weight | Supplier',
      '-----|-------------|-------------|-----|----------|------------|--------|----------',
      '1    | 0205-001-01 | Skid Runners| 2   | Doug Fir | 2x4x' + this.config.dimensions.width + ' | 5.2 | Local',
      '2    | 0205-001-02 | Skid Cross  | 2   | Doug Fir | 2x4x' + (this.config.dimensions.length-7) + ' | 3.8 | Local',
      '3    | 0205-002-01 | Floor Panel | 1   | CDX Ply  | 3/4x' + this.config.dimensions.width + 'x' + this.config.dimensions.length + ' | 15.6 | Local',
      '4    | 0205-003-01 | Front Panel | 1   | CDX Ply  | 3/4x' + this.config.dimensions.width + 'x' + this.config.dimensions.height + ' | 12.4 | Local',
      '5    | 0205-004-01 | Back Panel  | 1   | CDX Ply  | 3/4x' + this.config.dimensions.width + 'x' + this.config.dimensions.height + ' | 12.4 | Local',
      '6    | 0205-005-01 | Left Panel  | 1   | CDX Ply  | 3/4x' + this.config.dimensions.length + 'x' + this.config.dimensions.height + ' | 11.8 | Local',
      '7    | 0205-006-01 | Right Panel | 1   | CDX Ply  | 3/4x' + this.config.dimensions.length + 'x' + this.config.dimensions.height + ' | 11.8 | Local',
      ...((this.config.cap.topPanel ? true : false) ? ['8    | 0205-007-01 | Top Panel   | 1   | CDX Ply  | 3/4x' + this.config.dimensions.width + 'x' + this.config.dimensions.length + ' | 15.6 | Local'] : []),
      '',
      'Hardware:',
      'H1   | 3/8" x 6" Lag Bolts | 12 | Galvanized Steel',
      'H2   | #10 x 2.5" Wood Screws | 48 | Galvanized Steel',
      'H3   | Construction Adhesive | 1 tube | Polyurethane',
      '',
      'Notes:',
      '- All lumber to be kiln dried construction grade',
      '- All plywood to be CDX exterior grade',
      '- All fasteners to be hot dipped galvanized',
      '- ISPM-15 heat treatment required for export'
    ].join('\n');

    return new Blob([bomContent], { type: 'text/plain' });
  }

  private generateInstructions(): string {
    return [
      'AutoCrate NX Import Instructions',
      '==================================',
      '',
      `Generated: ${new Date().toISOString()}`,
      `Crate Configuration: ${this.config.dimensions.width}" x ${this.config.dimensions.length}" x ${this.config.dimensions.height}"`,
      '',
      'File Contents:',
      '- 01_Assembly_Drawing.prt - Main assembly drawing',
      '- 02-08_Component_Drawings.prt - Individual component details',
      '- 99_Bill_of_Materials.txt - Complete BOM with part numbers',
      '',
      'Import Instructions:',
      '1. Open NX CAD 2022 or later',
      '2. File > Import > Part Files',
      '3. Select all .prt files from this package',
      '4. Set units to INCHES',
      '5. Import with "Assembly Structure" option enabled',
      '',
      'Standards Compliance:',
      '- ASME Y14.5-2009 dimensioning and tolerancing',
      '- Third angle projection',
      '- Applied Materials part numbering (0205-XXXXX)',
      '- TC Engineering numbers (TC2-XXXXXXX)',
      '',
      'Material Specifications:',
      '- Douglas Fir lumber, construction grade',
      '- CDX plywood, exterior grade',
      '- Hot dipped galvanized fasteners',
      '- ISPM-15 compliant for international shipping',
      '',
      'For technical support, contact AutoCrate Engineering.'
    ].join('\n');
  }

  private createTitleBlock(title: string, partNumber?: string): TitleBlockData {
    return {
      projectName: title,
      partNumber: partNumber || this.generatePartNumber(),
      tcNumber: this.generateTCNumber(),
      revision: 'A',
      drawnBy: 'AutoCrate System',
      checkedBy: 'QA Department',
      approvedBy: 'Engineering Manager',
      date: new Date(),
      scale: '1:10',
      material: 'Douglas Fir / CDX Plywood',
      finish: 'Natural'
    };
  }

  private getDrawingComponents(): AssemblyComponent[] {
    const components: AssemblyComponent[] = [
      {
        id: 'skid',
        name: 'Skid Assembly',
        partNumber: `${this.generatePartNumber()}-001`,
        tcNumber: `${this.generateTCNumber()}-001`,
        filePath: '',
        transform: [],
        children: []
      },
      {
        id: 'floor',
        name: 'Floor Panel',
        partNumber: `${this.generatePartNumber()}-002`,
        tcNumber: `${this.generateTCNumber()}-002`,
        filePath: '',
        transform: [],
        children: []
      },
      {
        id: 'front',
        name: 'Front Panel',
        partNumber: `${this.generatePartNumber()}-003`,
        tcNumber: `${this.generateTCNumber()}-003`,
        filePath: '',
        transform: [],
        children: []
      },
      {
        id: 'back',
        name: 'Back Panel',
        partNumber: `${this.generatePartNumber()}-004`,
        tcNumber: `${this.generateTCNumber()}-004`,
        filePath: '',
        transform: [],
        children: []
      },
      {
        id: 'left',
        name: 'Left Panel',
        partNumber: `${this.generatePartNumber()}-005`,
        tcNumber: `${this.generateTCNumber()}-005`,
        filePath: '',
        transform: [],
        children: []
      },
      {
        id: 'right',
        name: 'Right Panel',
        partNumber: `${this.generatePartNumber()}-006`,
        tcNumber: `${this.generateTCNumber()}-006`,
        filePath: '',
        transform: [],
        children: []
      }
    ];

    if ((this.config.cap.topPanel ? true : false)) {
      components.push({
        id: 'top',
        name: 'Top Panel',
        partNumber: `${this.generatePartNumber()}-007`,
        tcNumber: `${this.generateTCNumber()}-007`,
        filePath: '',
        transform: [],
        children: []
      });
    }

    return components;
  }

  private generatePartNumber(): string {
    if (this.options.applyMaterialsStandards) {
      return `0205-${this.config.dimensions.width.toString().padStart(3, '0')}${this.config.dimensions.length.toString().padStart(3, '0')}${this.config.dimensions.height.toString().padStart(3, '0')}`;
    }
    return `CRATE-${this.config.dimensions.width}x${this.config.dimensions.length}x${this.config.dimensions.height}`;
  }

  private generateTCNumber(): string {
    const timestamp = Date.now().toString().slice(-7);
    return `TC2-${timestamp}`;
  }
}