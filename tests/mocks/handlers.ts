import { http, HttpResponse } from 'msw';

// Mock API handlers for testing
export const handlers = [
  // Mock authentication endpoints
  http.post('/api/auth/login', async ({ request }) => {
    const body = (await request.json()) as { email: string; password: string };

    if (body.email === 'test@example.com' && body.password === 'password') {
      return HttpResponse.json({
        user: {
          id: '1',
          email: 'test@example.com',
          name: 'Test User',
        },
        token: 'mock-jwt-token',
      });
    }

    return HttpResponse.json({ error: 'Invalid credentials' }, { status: 401 });
  }),

  // Mock crate configuration save endpoint
  http.post('/api/crate/save', async ({ request }) => {
    const body = await request.json() as Record<string, any>;

    return HttpResponse.json({
      id: 'crate-123',
      ...body,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    });
  }),

  // Mock crate configuration load endpoint
  http.get('/api/crate/:id', ({ params }) => {
    return HttpResponse.json({
      id: params.id,
      dimensions: {
        length: 1200,
        width: 800,
        height: 600,
        unit: 'mm',
      },
      weight: {
        product: 50,
      },
      base: {
        type: 'standard',
        floorboardThickness: 25,
        skidHeight: 100,
        skidWidth: 100,
        skidCount: 3,
        material: 'pine',
      },
      createdAt: '2024-01-01T00:00:00Z',
      updatedAt: '2024-01-01T00:00:00Z',
    });
  }),

  // Mock export endpoint
  http.post('/api/export/nx', async ({ request }) => {
    const body = await request.json();

    // Return a mock file URL
    return HttpResponse.json({
      fileUrl: '/api/download/nx-expression-123.txt',
      fileName: 'crate-config.txt',
      expiresAt: new Date(Date.now() + 3600000).toISOString(),
    });
  }),

  // Mock download endpoint
  http.get('/api/download/:fileId', () => {
    const mockNXContent = `# NX Expression File
# Generated by AutoCrate

length = 1200
width = 800
height = 600

# Base Configuration
base_type = "standard"
floorboard_thickness = 25`;

    return new HttpResponse(mockNXContent, {
      headers: {
        'Content-Type': 'text/plain',
        'Content-Disposition': 'attachment; filename="nx-expression.txt"',
      },
    });
  }),

  // Mock analytics endpoint
  http.post('/api/analytics/track', async ({ request }) => {
    const body = await request.json();

    return HttpResponse.json({
      success: true,
      eventId: 'event-' + Date.now(),
    });
  }),
];
