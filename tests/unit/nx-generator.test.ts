import { describe, it, expect, beforeEach } from 'vitest';
import { NXExpressionGenerator } from '@/services/nx-generator';
import { createMockCrateConfiguration, createPartialCrateConfiguration } from '../utils/test-utils';

describe('NXExpressionGenerator', () => {
  let generator: NXExpressionGenerator;
  let mockConfiguration: ReturnType<typeof createMockCrateConfiguration>;

  beforeEach(() => {
    mockConfiguration = createMockCrateConfiguration();
    generator = new NXExpressionGenerator(mockConfiguration);
  });

  describe('initialization', () => {
    it('should initialize with provided configuration', () => {
      expect(generator).toBeDefined();
      expect((generator as any).configuration).toEqual(mockConfiguration);
    });

    it('should handle metric units correctly', () => {
      const metricConfig = createPartialCrateConfiguration({
        dimensions: { length: 1000, width: 800, height: 600, unit: 'mm' },
      });
      const metricGenerator = new NXExpressionGenerator(metricConfig);
      const variables = metricGenerator.getVariables();

      expect(variables.crate_length).toBe(1000);
      expect(variables.crate_width).toBe(800);
      expect(variables.crate_height).toBe(600);
    });

    it('should convert imperial units to metric', () => {
      const imperialConfig = createPartialCrateConfiguration({
        dimensions: { length: 10, width: 8, height: 6, unit: 'inches' },
      });
      const imperialGenerator = new NXExpressionGenerator(imperialConfig);
      const variables = imperialGenerator.getVariables();

      expect(variables.crate_length).toBeCloseTo(254, 0); // 10 inches * 25.4
      expect(variables.crate_width).toBeCloseTo(203.2, 0); // 8 inches * 25.4
      expect(variables.crate_height).toBeCloseTo(152.4, 0); // 6 inches * 25.4
    });
  });

  describe('generateExpression', () => {
    it('should generate valid NX expression content', () => {
      const expression = generator.generateExpression();

      expect(expression).toContain('# NX Expression File');
      expect(expression).toContain('# Generated by AutoCrate');
      expect(expression).toContain('crate_length = 1200');
      expect(expression).toContain('crate_width = 800');
      expect(expression).toContain('crate_height = 600');
    });

    it('should include base configuration', () => {
      const expression = generator.generateExpression();

      expect(expression).toContain('base_type = "standard"');
      expect(expression).toContain('floorboard_thickness = 25');
      expect(expression).toContain('skid_height = 100');
      expect(expression).toContain('skid_count = 3');
    });

    it('should include panel configurations', () => {
      const expression = generator.generateExpression();

      expect(expression).toContain('top_panel_thickness = 20');
      expect(expression).toContain('front_panel_thickness = 20');
      expect(expression).toContain('back_panel_thickness = 20');
      expect(expression).toContain('left_panel_thickness = 20');
      expect(expression).toContain('right_panel_thickness = 20');
    });

    it('should calculate internal dimensions correctly', () => {
      const expression = generator.generateExpression();
      const variables = generator.getVariables();

      const expectedInternalLength = 1200 - 20 - 20; // length - left - right
      const expectedInternalWidth = 800 - 20 - 20; // width - front - back
      const expectedInternalHeight = 600 - 25 - 20; // height - floor - top

      expect(variables.internal_length).toBe(expectedInternalLength);
      expect(variables.internal_width).toBe(expectedInternalWidth);
      expect(variables.internal_height).toBe(expectedInternalHeight);
    });

    it('should include fastener configuration', () => {
      const expression = generator.generateExpression();

      expect(expression).toContain('fastener_type = "nails"');
      expect(expression).toContain('fastener_size = "medium"');
      expect(expression).toContain('fastener_spacing = 150');
    });

    it('should handle vinyl configuration when enabled', () => {
      const configWithVinyl = createPartialCrateConfiguration({
        vinyl: {
          enabled: true,
          type: 'waterproof',
          thickness: 1.5,
          coverage: 'full',
        },
      });
      const vinylGenerator = new NXExpressionGenerator(configWithVinyl);
      const expression = vinylGenerator.generateExpression();

      expect(expression).toContain('vinyl_enabled = 1');
      expect(expression).toContain('vinyl_type = "waterproof"');
      expect(expression).toContain('vinyl_thickness = 1.5');
      expect(expression).toContain('vinyl_coverage = "full"');
    });

    it('should handle vinyl configuration when disabled', () => {
      const expression = generator.generateExpression();

      expect(expression).toContain('vinyl_enabled = 0');
    });
  });

  describe('exportToFile', () => {
    it('should create a blob with correct content type', () => {
      const blob = generator.exportToFile();

      expect(blob).toBeInstanceOf(Blob);
      expect(blob.type).toBe('text/plain');
    });

    it('should contain the expression content', async () => {
      const blob = generator.exportToFile();
      const text = await blob.text();

      expect(text).toContain('# NX Expression File');
      expect(text).toContain('crate_length = 1200');
    });
  });

  describe('getVariables', () => {
    it('should return all calculated variables', () => {
      const variables = generator.getVariables();

      expect(variables).toHaveProperty('crate_length');
      expect(variables).toHaveProperty('crate_width');
      expect(variables).toHaveProperty('crate_height');
      expect(variables).toHaveProperty('internal_length');
      expect(variables).toHaveProperty('internal_width');
      expect(variables).toHaveProperty('internal_height');
      expect(variables).toHaveProperty('base_volume');
      expect(variables).toHaveProperty('total_volume');
    });

    it('should calculate volumes correctly', () => {
      const variables = generator.getVariables();

      const expectedBaseVolume = 1200 * 800 * 25; // length * width * floor thickness
      const expectedTotalVolume = 1200 * 800 * 600;

      expect(variables.base_volume).toBe(expectedBaseVolume);
      expect(variables.total_volume).toBe(expectedTotalVolume);
    });

    it('should calculate material volumes', () => {
      const variables = generator.getVariables();

      expect(variables.top_panel_volume).toBe(1200 * 800 * 20);
      expect(variables.front_panel_volume).toBe(1200 * 600 * 20);
      expect(variables.back_panel_volume).toBe(1200 * 600 * 20);
      expect(variables.left_panel_volume).toBe(800 * 600 * 20);
      expect(variables.right_panel_volume).toBe(800 * 600 * 20);
    });
  });

  describe('edge cases', () => {
    it('should handle zero dimensions gracefully', () => {
      const zeroConfig = createPartialCrateConfiguration({
        dimensions: { length: 0, width: 0, height: 0, unit: 'mm' },
      });
      const zeroGenerator = new NXExpressionGenerator(zeroConfig);
      const expression = zeroGenerator.generateExpression();

      expect(expression).toContain('crate_length = 0');
      expect(expression).toContain('crate_width = 0');
      expect(expression).toContain('crate_height = 0');
    });

    it('should handle very large dimensions', () => {
      const largeConfig = createPartialCrateConfiguration({
        dimensions: { length: 10000, width: 8000, height: 6000, unit: 'mm' },
      });
      const largeGenerator = new NXExpressionGenerator(largeConfig);
      const variables = largeGenerator.getVariables();

      expect(variables.crate_length).toBe(10000);
      expect(variables.total_volume).toBe(10000 * 8000 * 6000);
    });

    it('should handle disabled panels', () => {
      const noPanelConfig = createPartialCrateConfiguration({
        cap: {
          topPanel: { enabled: false, thickness: 0, material: 'none', ventilation: false },
          frontPanel: { enabled: false, thickness: 0, material: 'none', ventilation: false },
          backPanel: { enabled: false, thickness: 0, material: 'none', ventilation: false },
          leftPanel: { enabled: false, thickness: 0, material: 'none', ventilation: false },
          rightPanel: { enabled: false, thickness: 0, material: 'none', ventilation: false },
        },
      });
      const noPanelGenerator = new NXExpressionGenerator(noPanelConfig);
      const expression = noPanelGenerator.generateExpression();

      expect(expression).toContain('top_panel_enabled = 0');
      expect(expression).toContain('front_panel_enabled = 0');
    });

    it('should handle special characters in custom markings', () => {
      const specialConfig = createPartialCrateConfiguration({
        accessories: {
          cornerProtectors: false,
          handles: false,
          labels: false,
          moisture: false,
          customMarkings: 'Test & "Special" <Characters>',
        },
      });
      const specialGenerator = new NXExpressionGenerator(specialConfig);
      const expression = specialGenerator.generateExpression();

      expect(expression).toContain('custom_markings = "Test & \\"Special\\" <Characters>"');
    });
  });

  describe('performance', () => {
    it('should generate expression quickly for standard configuration', () => {
      const startTime = performance.now();
      generator.generateExpression();
      const endTime = performance.now();

      expect(endTime - startTime).toBeLessThan(100); // Should complete in less than 100ms
    });

    it('should handle multiple generations efficiently', () => {
      const startTime = performance.now();
      for (let i = 0; i < 100; i++) {
        generator.generateExpression();
      }
      const endTime = performance.now();

      expect(endTime - startTime).toBeLessThan(1000); // 100 generations in less than 1 second
    });
  });
});
